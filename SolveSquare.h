
const double Accuracy = 1e-08;                  // точность округления до нуля

struct OneTest
    {
    double a, b, c;
    double x1Correct, x2Correct;
    int nanswCorrect;
    };

const int SS_INF_nansw = 8;

//{
//! @brief   SolveSquare - решает квадратное уравнение
//!
//! @param   a     а   -   первый коэффициент квадратного уравнения
//! @param   b     b   -   второй коэффициент квадратного уравнения
//! @param   c     c   -   третий коэффициент квадратного уравнения
//! @param   &x1   &x1 -   адрес для возврата первого (меньшего) корня квадратного уравнения
//! @param   &x2   &x2 -   адрес для возврата второго корня квадратного уравнения
//!
//! @return  количество корней уравнения, 0, 1, 2 или 8 в случае, если бесконечное количество корней
//!
//! @code
//!          SolveSquare (1, 3, 4, &x1, &x2);
//! @endcode
//}

int SolveSquare (double a, double b, double c,  // коэффициенты квадратного уравнения
                 double *x1, double *x2);       // адреса для корней квадратного уравнения

//{
//! @brief   функция ввода
//!
//! @param   &a    &a   -   адрес для возврата первого коэффициента квадратного уравнения
//! @param   &b    &b   -   адрес для возврата второго коэффициента квадратного уравнения
//! @param   &c    &c   -   адрес для возврата третьего коэффициента квадратного уравнения
//! @return  0, если ввод не удачный
//!          1, если ввод удачный
//! @code
//!          Input (&a, &b, &c);
//! @endcode
//}

int Input (double *a, double *b, double *c);    // функция ввода

//{
//! @brief   функция очистки буфера, используется в случае неверного ввода
//!          для очистки всех символов до символа новой строки или конца файла
//! @code
//!          CleanBuf ();
//! @endcode
//}

void CleanBuf ();                               // функция очистки буфера

//{
//! @brief   функция выводит на экран надпись "Verification tests..."
//!
//! @code
//!          StartVerification ()
//! @endcode
//}

void StartVerification ();                      // функция выводит "verification tests..." на экран

//{
//! @brief   функция запускает проверку теста, меняя входные данные
//!
//! @code
//!          RunTests ()
//! @endcode
//}

void RunTests ();                               // функция для прогонки тестов

//{
//! @brief   функция вызывается в функции RunTests, она проверяет правильность
//!          работы функции SolveSquare (...) на разных тестах, в случае, когда
//!          тест не проходит, выводит на экран номер этого теста, входные данные,
//!          количество корней и корни уравнения , найденные SolveSquare (...),
//!          а затем правильные корни уравнения и правильное количество ответов
//!
//! @param   nTest   -   номер теста
//! @param   OneTest data  -   массив структур, в котором содержатся входные данные всех тестов
//! @param   &prov   -   адрес переменной, которая меняется, если в тесте произошла ошибка
//!
//! @code
//!          CheckTest (5, data[5], &prov);
//! @endcode
//}

void CheckTest (int nTest, OneTest data, int *prov); // функция проверки теста

//{
//! @brief   функция сравнивает число с нулём с точностью до Accuracy
//!
//! @param   a     a   -   число, которое сравнивается с нулём
//!
//! @return  1, если число с заданной точностью сравнимо с нулём
//!          0, если число не сравнимо с нулём
//!
//! @code
//!          CloseZero (0.1);
//! @endcode
//}

int CloseZero (double a);                       //функция для сравнения с нулём

int Compare (double a, double b);               //!< функция для сравнений двух чисел с точностью Accuracy

void Output (int nansw, double x1, double x2);  //!< функция вывода ответа взависимости от количества корней

